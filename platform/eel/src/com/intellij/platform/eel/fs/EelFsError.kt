// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package com.intellij.platform.eel.fs

import com.intellij.platform.eel.path.EelPath
import org.jetbrains.annotations.Nls
import java.io.IOException

sealed interface EelFsError {
  val where: EelPath.Absolute

  /**
   * This error message is generated by the IJent server application.
   * It can be written either in English or in the language of the server's locale.
   * It may contain a text returned by the remote operating system.
   */
  val message: String

  sealed interface Other : EelFsError

  sealed interface DoesNotExist : EelFsError
  sealed interface AlreadyExists : EelFsError
  sealed interface PermissionDenied : EelFsError
  sealed interface NotDirectory : EelFsError
  sealed interface NotFile : EelFsError
  sealed interface UnknownFile : EelFsError
  sealed interface ReadOnlyFileSystem : EelFsError
  sealed interface NameTooLong : EelFsError
  sealed interface NotEnoughSpace : EelFsError
  sealed interface DirNotEmpty : EelFsError
}

/**
 * For cases when `Unit` should be returned, because there's no way to force checking the return result in Kotlin.
 */
sealed class EelFsIOException(
  override val where: EelPath.Absolute,
  val additionalMessage: String,
) : IOException(), EelFsError {
  override val message: String
    get() {
      // TODO i18n
      val prefix: @Nls String = when (this) {
        is EelFsError.DoesNotExist -> "Does not exist"
        is EelFsError.NotDirectory -> "Not a directory"
        is EelFsError.NotFile -> "Not a file"
        is EelFsError.PermissionDenied -> "Permission denied"
        is EelFsError.AlreadyExists -> "File with this name already exists"
        is EelFsError.ReadOnlyFileSystem -> "File system is read-only"
        is EelFsError.Other -> "Unexpected rare error"
        is EelFsError.DirNotEmpty -> "Directory is not empty"
        is EelFsError.NameTooLong -> "Name is too long"
        is EelFsError.NotEnoughSpace -> "Not enough space"
        is EelOpenedFile.Writer.TruncateException.NegativeOffset -> "Offset is negative"
        is EelOpenedFile.Writer.TruncateException.OffsetTooBig -> "Offset is too big"
        is EelOpenedFile.Writer.TruncateException.UnknownFile -> "File is not opened"
        is EelFileSystemApi.DeleteException.UnresolvedLink -> "Unresolved link"
      }
      return if (additionalMessage.isEmpty()) "$prefix: $where" else "$prefix: $where ($additionalMessage)"
    }
}