// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: embeddings.proto

package org.jetbrains.embeddings.local.server.stubs;

@kotlin.jvm.JvmSynthetic
public inline fun startRequest(block: org.jetbrains.embeddings.local.server.stubs.start_requestKt.Dsl.() -> kotlin.Unit): org.jetbrains.embeddings.local.server.stubs.Embeddings.start_request =
  org.jetbrains.embeddings.local.server.stubs.start_requestKt.Dsl._create(org.jetbrains.embeddings.local.server.stubs.Embeddings.start_request.newBuilder()).apply { block() }._build()
public object start_requestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.jetbrains.embeddings.local.server.stubs.Embeddings.start_request.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.jetbrains.embeddings.local.server.stubs.Embeddings.start_request.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.jetbrains.embeddings.local.server.stubs.Embeddings.start_request = _builder.build()

    /**
     * <code>.org.jetbrains.embeddings.local.server.stubs.storage_location location = 1;</code>
     */
    public var location: org.jetbrains.embeddings.local.server.stubs.Embeddings.storage_location
      @JvmName("getLocation")
      get() = _builder.getLocation()
      @JvmName("setLocation")
      set(value) {
        _builder.setLocation(value)
      }
    /**
     * <code>.org.jetbrains.embeddings.local.server.stubs.storage_location location = 1;</code>
     */
    public fun clearLocation() {
      _builder.clearLocation()
    }
    /**
     * <code>.org.jetbrains.embeddings.local.server.stubs.storage_location location = 1;</code>
     * @return Whether the location field is set.
     */
    public fun hasLocation(): kotlin.Boolean {
      return _builder.hasLocation()
    }

    /**
     * <code>bool remove_unseen_keys = 2;</code>
     */
    public var removeUnseenKeys: kotlin.Boolean
      @JvmName("getRemoveUnseenKeys")
      get() = _builder.getRemoveUnseenKeys()
      @JvmName("setRemoveUnseenKeys")
      set(value) {
        _builder.setRemoveUnseenKeys(value)
      }
    /**
     * <code>bool remove_unseen_keys = 2;</code>
     */
    public fun clearRemoveUnseenKeys() {
      _builder.clearRemoveUnseenKeys()
    }
  }
}
public inline fun org.jetbrains.embeddings.local.server.stubs.Embeddings.start_request.copy(block: org.jetbrains.embeddings.local.server.stubs.start_requestKt.Dsl.() -> kotlin.Unit): org.jetbrains.embeddings.local.server.stubs.Embeddings.start_request =
  org.jetbrains.embeddings.local.server.stubs.start_requestKt.Dsl._create(this.toBuilder()).apply { block() }._build()
