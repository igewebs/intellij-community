//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: embeddings.proto

package org.jetbrains.embeddings.local.server.stubs;

@kotlin.jvm.JvmSynthetic
public inline fun presentRequest(block: org.jetbrains.embeddings.local.server.stubs.present_requestKt.Dsl.() -> kotlin.Unit): org.jetbrains.embeddings.local.server.stubs.Embeddings.present_request =
  org.jetbrains.embeddings.local.server.stubs.present_requestKt.Dsl._create(org.jetbrains.embeddings.local.server.stubs.Embeddings.present_request.newBuilder()).apply { block() }._build()
public object present_requestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.jetbrains.embeddings.local.server.stubs.Embeddings.present_request.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.jetbrains.embeddings.local.server.stubs.Embeddings.present_request.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.jetbrains.embeddings.local.server.stubs.Embeddings.present_request = _builder.build()

    /**
     * <code>.org.jetbrains.embeddings.local.server.stubs.storage_location location = 1;</code>
     */
    public var location: org.jetbrains.embeddings.local.server.stubs.Embeddings.storage_location
      @JvmName("getLocation")
      get() = _builder.getLocation()
      @JvmName("setLocation")
      set(value) {
        _builder.setLocation(value)
      }
    /**
     * <code>.org.jetbrains.embeddings.local.server.stubs.storage_location location = 1;</code>
     */
    public fun clearLocation() {
      _builder.clearLocation()
    }
    /**
     * <code>.org.jetbrains.embeddings.local.server.stubs.storage_location location = 1;</code>
     * @return Whether the location field is set.
     */
    public fun hasLocation(): kotlin.Boolean {
      return _builder.hasLocation()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class EntitiesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .org.jetbrains.embeddings.local.server.stubs.index_entity entities = 2;</code>
     */
     public val entities: com.google.protobuf.kotlin.DslList<org.jetbrains.embeddings.local.server.stubs.Embeddings.index_entity, EntitiesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getEntitiesList()
      )
    /**
     * <code>repeated .org.jetbrains.embeddings.local.server.stubs.index_entity entities = 2;</code>
     * @param value The entities to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addEntities")
    public fun com.google.protobuf.kotlin.DslList<org.jetbrains.embeddings.local.server.stubs.Embeddings.index_entity, EntitiesProxy>.add(value: org.jetbrains.embeddings.local.server.stubs.Embeddings.index_entity) {
      _builder.addEntities(value)
    }/**
     * <code>repeated .org.jetbrains.embeddings.local.server.stubs.index_entity entities = 2;</code>
     * @param value The entities to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignEntities")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<org.jetbrains.embeddings.local.server.stubs.Embeddings.index_entity, EntitiesProxy>.plusAssign(value: org.jetbrains.embeddings.local.server.stubs.Embeddings.index_entity) {
      add(value)
    }/**
     * <code>repeated .org.jetbrains.embeddings.local.server.stubs.index_entity entities = 2;</code>
     * @param values The entities to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllEntities")
    public fun com.google.protobuf.kotlin.DslList<org.jetbrains.embeddings.local.server.stubs.Embeddings.index_entity, EntitiesProxy>.addAll(values: kotlin.collections.Iterable<org.jetbrains.embeddings.local.server.stubs.Embeddings.index_entity>) {
      _builder.addAllEntities(values)
    }/**
     * <code>repeated .org.jetbrains.embeddings.local.server.stubs.index_entity entities = 2;</code>
     * @param values The entities to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllEntities")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<org.jetbrains.embeddings.local.server.stubs.Embeddings.index_entity, EntitiesProxy>.plusAssign(values: kotlin.collections.Iterable<org.jetbrains.embeddings.local.server.stubs.Embeddings.index_entity>) {
      addAll(values)
    }/**
     * <code>repeated .org.jetbrains.embeddings.local.server.stubs.index_entity entities = 2;</code>
     * @param index The index to set the value at.
     * @param value The entities to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setEntities")
    public operator fun com.google.protobuf.kotlin.DslList<org.jetbrains.embeddings.local.server.stubs.Embeddings.index_entity, EntitiesProxy>.set(index: kotlin.Int, value: org.jetbrains.embeddings.local.server.stubs.Embeddings.index_entity) {
      _builder.setEntities(index, value)
    }/**
     * <code>repeated .org.jetbrains.embeddings.local.server.stubs.index_entity entities = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearEntities")
    public fun com.google.protobuf.kotlin.DslList<org.jetbrains.embeddings.local.server.stubs.Embeddings.index_entity, EntitiesProxy>.clear() {
      _builder.clearEntities()
    }}
}
public inline fun org.jetbrains.embeddings.local.server.stubs.Embeddings.present_request.copy(block: org.jetbrains.embeddings.local.server.stubs.present_requestKt.Dsl.() -> kotlin.Unit): org.jetbrains.embeddings.local.server.stubs.Embeddings.present_request =
  org.jetbrains.embeddings.local.server.stubs.present_requestKt.Dsl._create(this.toBuilder()).apply { block() }._build()
