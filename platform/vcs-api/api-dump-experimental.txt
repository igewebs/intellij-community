*a:com.intellij.codeInsight.hints.VcsCodeVisionCurlyBracketLanguageContext
- com.intellij.codeInsight.hints.VcsCodeVisionLanguageContext
- <init>():V
- computeEffectiveRange(com.intellij.psi.PsiElement):com.intellij.openapi.util.TextRange
- pa:isRBrace(com.intellij.psi.PsiElement):Z
*:com.intellij.codeInsight.hints.VcsCodeVisionLanguageContext
- *sf:Companion:com.intellij.codeInsight.hints.VcsCodeVisionLanguageContext$Companion
- sf:EXTENSION:java.lang.String
- computeEffectiveRange(com.intellij.psi.PsiElement):com.intellij.openapi.util.TextRange
- a:handleClick(java.awt.event.MouseEvent,com.intellij.openapi.editor.Editor,com.intellij.psi.PsiElement):V
- a:isAccepted(com.intellij.psi.PsiElement):Z
- *:isCustomFileAccepted(com.intellij.psi.PsiFile):Z
*f:com.intellij.codeInsight.hints.VcsCodeVisionLanguageContext$Companion
- sf:EXTENSION:java.lang.String
- f:getProvidersExtensionPoint():com.intellij.lang.LanguageExtension
*:com.intellij.openapi.vcs.changes.CommitExecutorWithRichDescription
- com.intellij.openapi.vcs.changes.CommitExecutor
- a:getText(com.intellij.vcs.commit.CommitWorkflowHandlerState):java.lang.String
*:com.intellij.openapi.vcs.changes.VcsDirtyScopeBuilder
- a:addDirtyPathFast(com.intellij.openapi.vfs.VirtualFile,com.intellij.openapi.vcs.FilePath,Z):V
- a:belongsTo(com.intellij.openapi.vcs.FilePath):Z
- a:markEverythingDirty():V
- a:pack():com.intellij.openapi.vcs.changes.VcsModifiableDirtyScope
*:com.intellij.openapi.vcs.checkin.CommitCheck
- com.intellij.openapi.project.PossiblyDumbAware
- a:getExecutionOrder():com.intellij.openapi.vcs.checkin.CommitCheck$ExecutionOrder
- a:isEnabled():Z
- a:runCheck(com.intellij.openapi.vcs.checkin.CommitInfo,kotlin.coroutines.Continuation):java.lang.Object
*e:com.intellij.openapi.vcs.checkin.CommitCheck$ExecutionOrder
- java.lang.Enum
- sf:EARLY:com.intellij.openapi.vcs.checkin.CommitCheck$ExecutionOrder
- sf:LATE:com.intellij.openapi.vcs.checkin.CommitCheck$ExecutionOrder
- sf:MODIFICATION:com.intellij.openapi.vcs.checkin.CommitCheck$ExecutionOrder
- sf:POST_COMMIT:com.intellij.openapi.vcs.checkin.CommitCheck$ExecutionOrder
- s:getEntries():kotlin.enums.EnumEntries
- s:valueOf(java.lang.String):com.intellij.openapi.vcs.checkin.CommitCheck$ExecutionOrder
- s:values():com.intellij.openapi.vcs.checkin.CommitCheck$ExecutionOrder[]
*:com.intellij.openapi.vcs.checkin.CommitProblem
- *sf:Companion:com.intellij.openapi.vcs.checkin.CommitProblem$Companion
- a:getText():java.lang.String
- showModalSolution(com.intellij.openapi.project.Project,com.intellij.openapi.vcs.checkin.CommitInfo):com.intellij.openapi.vcs.checkin.CheckinHandler$ReturnResult
*f:com.intellij.openapi.vcs.checkin.CommitProblem$Companion
- f:createError(java.lang.Throwable):com.intellij.openapi.vcs.checkin.CommitProblem
*:com.intellij.openapi.vcs.checkin.CommitProblemWithDetails
- com.intellij.openapi.vcs.checkin.CommitProblem
- a:getShowDetailsAction():java.lang.String
- getShowDetailsLink():java.lang.String
- a:showDetails(com.intellij.openapi.project.Project):V
*:com.intellij.openapi.vcs.checkin.PostCommitChangeConverter
- a:areConsequentCommits(java.util.List):Z
- a:collectChangesAfterCommit(com.intellij.openapi.vcs.changes.CommitContext):java.util.List
- a:isFailureUpToDate(java.util.List):Z
*:com.intellij.vcs.commit.AmendCommitHandler
- a:addAmendCommitModeListener(com.intellij.vcs.commit.AmendCommitModeListener,com.intellij.openapi.Disposable):V
- a:isAmendCommitMode():Z
- a:isAmendCommitModeSupported():Z
- a:isAmendCommitModeTogglingEnabled():Z
- a:setAmendCommitMode(Z):V
- a:setAmendCommitModeTogglingEnabled(Z):V
*f:com.intellij.vcs.commit.CommitWorkflowHandlerState
- <init>(Z,Z):V
- f:component1():Z
- f:component2():Z
- f:copy(Z,Z):com.intellij.vcs.commit.CommitWorkflowHandlerState
- bs:copy$default(com.intellij.vcs.commit.CommitWorkflowHandlerState,Z,Z,I,java.lang.Object):com.intellij.vcs.commit.CommitWorkflowHandlerState
- equals(java.lang.Object):Z
- hashCode():I
- f:isAmend():Z
- f:isSkipCommitChecks():Z
*:com.intellij.vfs.AsyncVfsEventsListener
- a:filesChanged(java.util.List,kotlin.coroutines.Continuation):java.lang.Object
*:com.intellij.vfs.AsyncVfsEventsPostProcessor
- a:addListener(com.intellij.vfs.AsyncVfsEventsListener,kotlinx.coroutines.CoroutineScope):V
- s:getInstance():com.intellij.vfs.AsyncVfsEventsPostProcessor
