insufficient.language.level={0} are not supported at language level ''{1}''
illegal.unicode.escape=Illegal Unicode escape sequence

annotation.not.allowed.here=Annotations are not allowed here
annotation.not.applicable=''@{0}'' not applicable to {1}
annotation.not.allowed.void='void' type may not be annotated
annotation.not.allowed.var='var' type may not be annotated
annotation.not.allowed.class=Class literal type may not be annotated
annotation.not.allowed.ref=Annotation is not applicable to this kind of reference
annotation.not.allowed.static=Static member qualifying type may not be annotated
annotation.not.allowed.on.package=Package annotations should be in file package-info.java
annotation.type.expected=Annotation type expected
annotation.missing.attribute={0} missing though required
annotation.repeated.target=Repeated annotation target
annotation.attribute.annotation.name.is.missing=Annotation attribute of the form 'name=value' expected
annotation.attribute.unknown.method=Cannot find @interface method ''{0}()''
annotation.attribute.duplicate=Duplicate attribute ''{0}''
annotation.attribute.non.class.literal=Attribute value must be a class literal
annotation.attribute.incompatible.type=Incompatible types. Found: ''{1}'', required: ''{0}''
annotation.attribute.illegal.array.initializer=Illegal initializer for ''{0}''
annotation.attribute.non.enum.constant=Attribute value must be an enum constant
annotation.attribute.non.constant=Attribute value must be constant
annotation.member.may.not.have.throws.list='throws' not allowed on @interface method
annotation.member.invalid.type=Invalid type ''{0}'' for annotation member
annotation.member.clash=@interface member clashes with ''{0}'' in {1}
annotation.may.not.have.extends.list='extends' not allowed on @interface
annotation.cyclic.element.type=Cyclic annotation element type
annotation.container.wrong.place=Container annotation ''{0}'' must not be present at the same time as the element it contains
annotation.container.not.applicable=Container annotation ''@{0}'' is not applicable to {1}
annotation.duplicate=Duplicate annotation
annotation.duplicate.explained=Duplicate annotation. {0}
annotation.duplicate.non.repeatable=Duplicate annotation. The declaration of ''{0}'' does not have a valid java.lang.annotation.Repeatable annotation
annotation.malformed.repeatable.explained={0}
annotation.cannot.be.local=Local annotations are not allowed
annotation.permits='permits' not allowed on @interface

annotation.container.missed.annotation=Container annotation ''{0}'' does not have required @{1} annotation
annotation.container.no.value=Invalid container annotation ''{0}'': no ''value'' method declared
annotation.container.bad.type=Invalid container annotation ''{0}'': ''value'' method should have type ''{1}''
annotation.container.low.retention=Container annotation ''{0}'' has shorter retention (''{1}'') than the contained annotation
annotation.container.wide.target=Target of container annotation ''{0}'' is not a subset of target of this annotation
annotation.container.abstract=Container annotation ''{0}'' does not have a default value for ''{1}''

lambda.not.a.functional.interface={0} is not a functional interface
lambda.no.target.method.found=No target method found
lambda.multiple.sam.candidates=Multiple non-overriding abstract methods found in interface {0}
lambda.sealed.functional.interface=Functional interface can't be declared as 'sealed'

method.duplicate=''{0}'' is already defined in ''{1}''

safe.varargs.on.record.component=@SafeVarargs is not allowed on a record component
safe.varargs.on.fixed.arity=@SafeVarargs is not allowed on methods with fixed arity
safe.varargs.on.non.final.method=@SafeVarargs is not allowed on non-final instance methods

receiver.wrong.context=Receivers are not allowed outside of method parameter list
receiver.static.context=The receiver cannot be used in a static context
receiver.wrong.position=The receiver should be the first parameter
receiver.type.mismatch=The receiver type does not match the enclosing class type
receiver.name.mismatch=The receiver name does not match the enclosing class type

override.on.static.method=Static methods cannot be annotated with @Override
override.on.non-overriding.method=Method does not override method from its superclass

class.must.implement.method=Class ''{0}'' must implement abstract method ''{1}'' in ''{2}''
class.must.implement.method.or.abstract=Class ''{0}'' must either be declared abstract or implement abstract method ''{1}'' in ''{2}''
class.must.implement.method.enum.constant=Enum constant ''{0}'' must implement abstract method ''{1}'' in ''{2}''
class.duplicate=Duplicate class: ''{0}''
class.duplicate.in.other.file=Duplicate class found in the file ''{0}''
class.cyclic.inheritance=Cyclic inheritance involving ''{0}''
class.reference.list.duplicate=Duplicate reference to ''{0}'' in ''{1}'' list
class.reference.list.name.expected=Class name expected
class.reference.list.inner.private=''{0}'' has private access in ''{1}''
class.reference.list.no.enclosing.instance=No enclosing instance of type ''{0}'' is in scope
class.clashes.with.package=Class ''{0}'' clashes with package of same name
class.wrong.filename=Class ''{0}'' is public, should be declared in a file named ''{0}.java''
class.sealed.no.inheritors=Sealed class must have subclasses
class.sealed.incomplete.permits=Sealed class permits clause must contain all subclasses
class.sealed.inheritor.expected.modifiers.can.be.final=Modifier 'sealed', 'non-sealed' or 'final' expected
class.sealed.inheritor.expected.modifiers=Modifier 'sealed' or 'non-sealed' expected
class.sealed.permits.on.non.sealed=Invalid permits clause: ''{0}'' must be sealed
class.cannot.extend.multiple.classes=Class cannot extend multiple classes
class.implements.class=Interface expected here
class.extends.interface=No interface expected here
class.extends.final=Cannot inherit from {1, choice, 1#final class|2#enum|3#record|4#non-abstract value class} ''{0}''
class.extends.prohibited.class=Classes cannot directly extend ''{0}''
class.inherits.type.parameter=Class cannot inherit from its type parameter
class.anonymous.extends.sealed=Anonymous classes must not extend sealed classes
class.already.imported=''{0}'' is already defined in this compilation unit

class.implicit.no.main.method=Implicitly declared class contains no 'main' method
class.implicit.invalid.file.name=Implicitly declared class's file name is not a valid identifier
class.implicit.initializer=Initializers are not allowed in implicitly declared classes
class.implicit.package.statement=Package statement is not allowed for implicitly declared class

value.class.extends.non.abstract=Value classes may only extend abstract value classes or 'java.lang.Object'

interface.constructor=Constructor is not allowed in interface
interface.class.initializer=Class initializer is not allowed in interface
interface.implements='implements' not allowed on interface
interface.extends.class=Interface expected here

record.instance.initializer=Instance initializer is not allowed in record
record.instance.field=Instance field is not allowed in record
record.no.header=Record has no header declared
record.header.regular.class=Record header declared for non-record
record.extends='extends' not allowed on record
record.permits='permits' not allowed on record

enum.extends='extends' not allowed on enum
enum.permits='permits' not allowed on enum

instantiation.enum=Enum types cannot be instantiated
instantiation.abstract=''{0}'' is abstract; cannot be instantiated

identifier.restricted=''{0}'' is a restricted identifier and cannot be used for type declarations

type.parameter.extends.interface.expected=Interface expected here
type.parameter.cannot.be.followed.by.other.bounds=Type parameter cannot be followed by other bounds
type.parameter.on.enum=Enum may not have type parameters
type.parameter.on.annotation.member=@interface members may not have type parameters
type.parameter.on.annotation=@interface may not have type parameters
type.parameter.duplicate=Duplicate type parameter: ''{0}''

method.throws.class.name.expected=Class name expected

type.incompatible=Incompatible types. Found: ''{1}'', required: ''{0}''
# {0} - left raw type, {1} - required type arguments row, {2} - right raw type, {3} - found type arguments row, {4} - reason, {5} - greyed title color
type.incompatible.html.tooltip=\
  <html><body><table>\
  <tr><td style="padding: 0px 16px 8px 4px;" class="{5}">Required type:</td><td style="padding: 0px 4px 8px 0px;">{0}</td>{1}</tr>\
  <tr><td style="padding: 0px 16px 0px 4px;" class="{5}">Provided:</td><td style="padding: 0px 4px 0px 0px;">{2}</td>{3}</tr>\
  </table>{4}</body></html>
type.incompatible.reason.ambiguous.method.reference=<br/>reason: method reference is ambiguous: both ''{0}'' and ''{1}'' match

new.expression.qualified.malformed=Invalid qualified new
new.expression.qualified.static.class=Qualified new of static class
new.expression.qualified.anonymous.implements.interface=Anonymous class implements interface; cannot have qualifier for new
new.expression.qualified.qualified.class.reference=Qualified class reference is not allowed in qualified new

comment.shebang.java.file=Shebang mechanism in .java files is not permitted
comment.unclosed=Unclosed comment

literal.illegal.underscore=Illegal underscore
literal.hexadecimal.no.digits=Hexadecimal numbers must contain at least one hexadecimal digit
literal.binary.no.digits=Binary numbers must contain at least one binary digit
literal.integer.too.large=Integer number too large
literal.long.too.large=Long number too large
literal.floating.malformed=Malformed floating point literal
literal.floating.too.large=Floating point number too large
literal.floating.too.small=Floating point number too small
literal.character.too.long=Too many characters in character literal
literal.character.unclosed=Unclosed character literal
literal.character.illegal.escape=Illegal escape character in character literal
literal.character.empty=Empty character literal
literal.string.illegal.line.end=Line end not allowed in string literals
literal.string.illegal.escape=Illegal escape character in string literal
literal.text.block.unclosed=Unclosed text block
literal.text.block.no.new.line=Illegal text block start: missing new line after opening quotes
