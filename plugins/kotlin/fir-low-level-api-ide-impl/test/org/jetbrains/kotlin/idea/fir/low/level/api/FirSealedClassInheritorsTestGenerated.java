// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.fir.low.level.api;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir-low-level-api-ide-impl")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/sealedClassInheritors")
public class FirSealedClassInheritorsTestGenerated extends AbstractFirSealedClassInheritorsTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("ambiguousLibrarySealedClass")
    public void testAmbiguousLibrarySealedClass() throws Exception {
        runTest("testData/sealedClassInheritors/ambiguousLibrarySealedClass/");
    }

    @TestMetadata("ambiguousLibrarySealedInterface")
    public void testAmbiguousLibrarySealedInterface() throws Exception {
        runTest("testData/sealedClassInheritors/ambiguousLibrarySealedInterface/");
    }

    @TestMetadata("ambiguousSealedClass")
    public void testAmbiguousSealedClass() throws Exception {
        runTest("testData/sealedClassInheritors/ambiguousSealedClass/");
    }

    @TestMetadata("ambiguousSealedInterface")
    public void testAmbiguousSealedInterface() throws Exception {
        runTest("testData/sealedClassInheritors/ambiguousSealedInterface/");
    }

    @TestMetadata("illegalDistributedSealedClass")
    public void testIllegalDistributedSealedClass() throws Exception {
        runTest("testData/sealedClassInheritors/illegalDistributedSealedClass/");
    }

    @TestMetadata("illegalExtendedLibrarySealedClass")
    public void testIllegalExtendedLibrarySealedClass() throws Exception {
        runTest("testData/sealedClassInheritors/illegalExtendedLibrarySealedClass/");
    }

    @TestMetadata("indirectInheritorsLibrarySealedClass")
    public void testIndirectInheritorsLibrarySealedClass() throws Exception {
        runTest("testData/sealedClassInheritors/indirectInheritorsLibrarySealedClass/");
    }

    @TestMetadata("indirectInheritorsLibrarySealedInterface")
    public void testIndirectInheritorsLibrarySealedInterface() throws Exception {
        runTest("testData/sealedClassInheritors/indirectInheritorsLibrarySealedInterface/");
    }

    @TestMetadata("indirectInheritorsSealedClass")
    public void testIndirectInheritorsSealedClass() throws Exception {
        runTest("testData/sealedClassInheritors/indirectInheritorsSealedClass/");
    }

    @TestMetadata("indirectInheritorsSealedInterface")
    public void testIndirectInheritorsSealedInterface() throws Exception {
        runTest("testData/sealedClassInheritors/indirectInheritorsSealedInterface/");
    }

    @TestMetadata("librarySealedClass")
    public void testLibrarySealedClass() throws Exception {
        runTest("testData/sealedClassInheritors/librarySealedClass/");
    }

    @TestMetadata("librarySealedInterface")
    public void testLibrarySealedInterface() throws Exception {
        runTest("testData/sealedClassInheritors/librarySealedInterface/");
    }

    @TestMetadata("nestedLibrarySealedClass")
    public void testNestedLibrarySealedClass() throws Exception {
        runTest("testData/sealedClassInheritors/nestedLibrarySealedClass/");
    }

    @TestMetadata("nestedLibrarySealedInterface")
    public void testNestedLibrarySealedInterface() throws Exception {
        runTest("testData/sealedClassInheritors/nestedLibrarySealedInterface/");
    }

    @TestMetadata("nestedSealedClass")
    public void testNestedSealedClass() throws Exception {
        runTest("testData/sealedClassInheritors/nestedSealedClass/");
    }

    @TestMetadata("nestedSealedInterface")
    public void testNestedSealedInterface() throws Exception {
        runTest("testData/sealedClassInheritors/nestedSealedInterface/");
    }

    @TestMetadata("otherModuleSealedClass")
    public void testOtherModuleSealedClass() throws Exception {
        runTest("testData/sealedClassInheritors/otherModuleSealedClass/");
    }

    @TestMetadata("otherModuleSealedInterface")
    public void testOtherModuleSealedInterface() throws Exception {
        runTest("testData/sealedClassInheritors/otherModuleSealedInterface/");
    }

    @TestMetadata("sameModuleSealedClass")
    public void testSameModuleSealedClass() throws Exception {
        runTest("testData/sealedClassInheritors/sameModuleSealedClass/");
    }

    @TestMetadata("sameModuleSealedClassWithIrregularPackage")
    public void testSameModuleSealedClassWithIrregularPackage() throws Exception {
        runTest("testData/sealedClassInheritors/sameModuleSealedClassWithIrregularPackage/");
    }

    @TestMetadata("sameModuleSealedInterface")
    public void testSameModuleSealedInterface() throws Exception {
        runTest("testData/sealedClassInheritors/sameModuleSealedInterface/");
    }
}
